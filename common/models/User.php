<?php

namespace common\models;

use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;

/**
 * This is the model class for table "user".
 * protected $username;
 * protected $password;
 * protected $password_hash
 * protected $email;
 * protected $status;
 * protected $auth_key;
 * protected $password_repeat;
 */
class User extends \yii\db\ActiveRecord implements \yii\web\IdentityInterface
{
    const SCENARIO_REGISTER = 'register';
    public string $password_repeat ='';
    public string $password = '';

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'user';
    }

    public function scenarios()
    {
        $scenarios = parent::scenarios(); // TODO: Change the autogenerated stub
        //
        $scenarios[self::SCENARIO_REGISTER] = ['username', 'password','email', 'password_repeat'];
        return $scenarios;
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['username', 'password_hash','email'], 'required'],
            [['username'], 'string', 'max' => 32],
            [['status'], 'safe'],
            [['auth_key','email'], 'string', 'max' => 256],
            [['username', 'auth_key', 'email'], 'unique'],
            [['password'], 'string', 'length'=>['min'=>6, 'max'=>16]],
            ['password', 'compare', 'on'=>self::SCENARIO_REGISTER, 'compareAttribute'=>'password_repeat'],
            [['username', 'password','email', 'password_repeat'], 'required', 'on'=>self::SCENARIO_REGISTER],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'username' => 'Username',
            'password' => 'Password',
            'email'=>'email',
            'password_repeat' => 'Password Repeat',
            'auth_key' => 'Auth Key',
            'status' => 'Status',
        ];
    }

    public function behaviors()
    {
        //return parent::behaviors(); // TODO: Change the autogenerated stub
        return [
            [
                'class'=>TimestampBehavior::class,
                'attributes'=>[
                    ActiveRecord::EVENT_BEFORE_INSERT=> ['created_at', 'updated_at'],
                    ActiveRecord::EVENT_BEFORE_UPDATE=>[ 'updated_at'],
                ],
            ]
        ];
    }

    public function beforeValidate()
    {
        if($this->isNewRecord){
            $this->auth_key = \Yii::$app->security->generateRandomString();
            $this->created_at = $this->updated_at =time();
        }
        if($this->password){
            $this->password_hash = \Yii::$app->security->generatePasswordHash($this->password);
        }
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    public function beforeSave($insert)
   {
       return parent::beforeSave($insert); // TODO: Change the autogenerated stub
   }

    /**
     * @param $id
     * @return User|\yii\web\IdentityInterface|null
     */
    public static function findIdentity($id)
    {
        return static::findOne(['id' => $id]);
    }

    /**
     * @param $token
     * @param $type
     * @return User|\yii\web\IdentityInterface|null
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        return static::findOne(['auth_key' => $token]);
    }

    /**
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * @return string|null
     */
    public function getAuthKey()
    {
        return $this->auth_key;
    }

    /**
     * @param $authKey
     * @return bool
     */
    public function validateAuthKey($authKey)
    {
        return $this->auth_key === $authKey;
    }

    public function fields()
    {
        return [
            'id',
            'username',
            'auth_key',
            'email',
            'status',
            'created_at'=>function($model){return date('Y-m-d H:i:s', $model->created_at);},
            'updated_at'=>function($model){return date('Y-m-d H:i:s', $model->updated_at);},
        ];
    }

    public function extraFields()
    {
        return [
            'created_at' => Yii::$app->formatter->asDatetime($this->created_at),
            'updated_at' => Yii::$app->formatter->asDatetime($this->updated_at),
        ];
    }
}
